// Generated by CoffeeScript 1.6.3
(function() {
  var SAMPLE_RATE, SEMITONE, STREAM_LENGTH, T;

  SEMITONE = 1.05946309;

  STREAM_LENGTH = 1024;

  SAMPLE_RATE = 48000;

  T = new MutekiTimer();

  this.VCO = (function() {
    function VCO() {
      this.freq_key = 55;
      this.shape = "SINE";
      this.octave = 4;
      this.interval = 0;
      this.fine = 0;
      this.note = 0;
      this.freq = Math.pow(2, this.octave) * this.freq_key;
      this.period_sample = SAMPLE_RATE / this.freq;
      this.phase = 0;
      this.d_phase = (2.0 * Math.PI) / this.period_sample;
    }

    VCO.prototype.setShape = function(shape) {
      this.shape = shape;
    };

    VCO.prototype.setOctave = function(octave) {
      this.octave = octave;
    };

    VCO.prototype.setInterval = function(interval) {
      this.interval = interval;
    };

    VCO.prototype.setFine = function(fine) {
      this.fine = fine;
    };

    VCO.prototype.setNote = function(note) {
      this.note = note;
    };

    VCO.prototype.setKey = function(freq_key) {
      this.freq_key = freq_key;
    };

    VCO.prototype.setFreq = function() {
      this.freq = (Math.pow(2, this.octave) * Math.pow(SEMITONE, this.interval + this.note) * this.freq_key) + this.fine;
      this.period_sample = SAMPLE_RATE / this.freq;
      return this.d_phase = (2.0 * Math.PI) / this.period_sample;
    };

    VCO.prototype.sine = function() {
      return Math.cos(this.phase * this.d_phase);
    };

    VCO.prototype.triangle = function() {
      var saw2;
      saw2 = this.saw() * 2.0;
      switch (false) {
        case !(saw2 < -1.0):
          return saw2 + 2.0;
        case !(saw2 < 1.0):
          return saw2 + 2.0;
        default:
          return saw2 - 2.0;
      }
    };

    VCO.prototype.saw = function() {
      var p;
      p = this.phase % this.period_sample;
      return 1.99 * (p / this.period_sample) - 1.0;
    };

    VCO.prototype.rect = function() {
      if (this.sine() > 0) {
        return -1.0;
      } else {
        return 1.0;
      }
    };

    VCO.prototype.noise = function() {
      return Math.random();
    };

    VCO.prototype.nextSample = function() {
      this.phase++;
      switch (this.shape) {
        case "SINE":
          return this.sine();
        case "TRIANGLE":
          return this.triangle();
        case "SAW":
          return this.saw();
        case "RECT":
          return this.rect();
        case "NOISE":
          return this.noise();
        default:
          return this.sine();
      }
    };

    VCO.prototype.nextStream = function() {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= STREAM_LENGTH ? _i < STREAM_LENGTH : _i > STREAM_LENGTH; i = 0 <= STREAM_LENGTH ? ++_i : --_i) {
        _results.push(this.nextSample());
      }
      return _results;
    };

    return VCO;

  })();

  this.EG = (function() {
    function EG() {
      this.time = 0;
      this.on = false;
      this.envelope = 0.0;
      this.attack = 0;
      this.decay = 0;
      this.sustain = 0.0;
      this.release = 0;
    }

    EG.prototype.setParam = function(attack, decay, sustain, release) {
      this.attack = attack;
      this.decay = decay;
      this.release = release;
      return this.sustain = sustain / 100.0;
    };

    EG.prototype.getParam = function() {
      return [this.attack, this.decay, this.sustain, this.release];
    };

    EG.prototype.noteOn = function() {
      this.time = 0;
      return this.on = true;
    };

    EG.prototype.noteOff = function() {
      this.time = 0;
      this.on = false;
      return this.envelope_released = this.envelope;
    };

    EG.prototype.step = function() {
      return this.time++;
    };

    EG.prototype.getEnvelope = function() {
      var e;
      if (this.on) {
        if (this.time < this.attack) {
          this.envelope = 1.0 * (this.time / this.attack);
        } else if (this.time < (this.attack + this.decay)) {
          e = ((this.time - this.attack) / this.decay) * (1.0 - this.sustain);
          this.envelope = 1.0 - e;
        } else {
          this.envelope = this.sustain;
        }
      } else {
        if (this.time < this.release) {
          this.envelope = this.envelope_released * (this.release - this.time) / this.release;
        } else {
          this.envelope = 0.0;
        }
      }
      return this.envelope;
    };

    return EG;

  })();

  this.ResFilter = (function() {
    function ResFilter(ctx) {
      this.lpf = ctx.createBiquadFilter();
      this.lpf.type = 0;
      this.freq_min = 80;
      this.freq = 5000;
      this.resonance = 10;
      this.Q = 10;
    }

    ResFilter.prototype.connect = function(dst) {
      return this.lpf.connect(dst);
    };

    ResFilter.prototype.connectFEG = function(feg) {
      this.feg = feg;
    };

    ResFilter.prototype.getNode = function() {
      return this.lpf;
    };

    ResFilter.prototype.getResonance = function() {
      return this.Q;
    };

    ResFilter.prototype.setFreq = function(freq) {
      return this.freq = Math.pow(freq / 1000, 2.0) * 25000;
    };

    ResFilter.prototype.setQ = function(q) {
      this.q = q;
      return this.lpf.Q.value = this.Q;
    };

    ResFilter.prototype.update = function() {
      return this.lpf.frequency.value = this.freq * this.feg.getEnvelope() + this.freq_min;
    };

    return ResFilter;

  })();

  this.SynthCore = (function() {
    function SynthCore(parent, ctx, id) {
      this.parent = parent;
      this.ctx = ctx;
      this.id = id;
      this.node = this.ctx.createJavaScriptNode(STREAM_LENGTH, 1, 2);
      this.is_initialized = false;
      this.vco = [new VCO(), new VCO(), new VCO()];
      this.gain = [1.0, 1.0, 1.0];
      this.eg = new EG();
      this.feg = new EG();
      this.filter = new ResFilter(this.ctx);
      this.filter.connectFEG(this.feg);
      this.vco_res = new VCO();
      this.vco_res.setShape("NOISE");
      this.ratio = 1.0;
      this.freq_key = 0;
      this.is_playing = false;
      this.view = new SynthCoreView(this, id, this.parent.view.dom.find('.core'));
    }

    SynthCore.prototype.setVCOParam = function(i, shape, oct, interval, fine) {
      this.vco[i].setShape(shape);
      this.vco[i].setOctave(oct);
      this.vco[i].setInterval(interval);
      this.vco[i].setFine(fine);
      return this.vco[i].setFreq();
    };

    SynthCore.prototype.setEGParam = function(a, d, s, r) {
      return this.eg.setParam(a, d, s, r);
    };

    SynthCore.prototype.setFEGParam = function(a, d, s, r) {
      return this.feg.setParam(a, d, s, r);
    };

    SynthCore.prototype.setFilterParam = function(freq, q) {
      this.filter.setFreq(freq);
      return this.filter.setQ(q);
    };

    SynthCore.prototype.setGain = function(i, gain) {
      return this.gain[i] = gain / 100.0;
    };

    SynthCore.prototype.nextStream = function() {
      var env, i, j, res, s_res, s_vco, stream, _i, _j, _ref;
      res = this.filter.getResonance();
      s_vco = (function() {
        var _i, _len, _ref, _results;
        _ref = this.vco;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          j = _ref[_i];
          _results.push(j.nextStream());
        }
        return _results;
      }).call(this);
      s_res = this.vco_res.nextStream();
      stream = [];
      for (i = _i = 0; 0 <= STREAM_LENGTH ? _i < STREAM_LENGTH : _i > STREAM_LENGTH; i = 0 <= STREAM_LENGTH ? ++_i : --_i) {
        this.eg.step();
        this.feg.step();
        this.filter.update();
        env = this.eg.getEnvelope();
        stream[i] = 0;
        for (j = _j = 0, _ref = this.vco.length; 0 <= _ref ? _j < _ref : _j > _ref; j = 0 <= _ref ? ++_j : --_j) {
          stream[i] += s_vco[j][i] * this.gain[j] * 0.3 * env;
        }
        if (res > 1) {
          stream[i] += s_res[i] * 0.1 * (res / 1000.0);
        }
      }
      return stream;
    };

    SynthCore.prototype.noteOn = function() {
      this.is_playing = true;
      this.eg.noteOn();
      this.feg.noteOn();
      if (!this.is_initialized) {
        return this.initNode();
      }
    };

    SynthCore.prototype.noteOff = function() {
      this.is_playing = false;
      this.eg.noteOff();
      return this.feg.noteOff();
    };

    SynthCore.prototype.initNode = function() {
      var _this = this;
      this.is_initialized = true;
      return this.node.onaudioprocess = function(event) {
        var data_L, data_R, i, s, _i, _ref, _results;
        data_L = event.outputBuffer.getChannelData(0);
        data_R = event.outputBuffer.getChannelData(1);
        s = _this.nextStream();
        _results = [];
        for (i = _i = 0, _ref = data_L.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(data_L[i] = data_R[i] = s[i]);
        }
        return _results;
      };
    };

    SynthCore.prototype.setKey = function(freq_key) {
      var v, _i, _len, _ref, _results;
      this.freq_key = freq_key;
      _ref = this.vco;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _results.push(v.setKey(this.freq_key));
      }
      return _results;
    };

    SynthCore.prototype.setScale = function(scale) {
      this.scale = scale;
    };

    SynthCore.prototype.isPlaying = function() {
      return this.is_playing;
    };

    SynthCore.prototype.connect = function(dst) {
      this.node.connect(this.filter.getNode());
      return this.filter.connect(dst);
    };

    SynthCore.prototype.setNote = function(note) {
      var v, _i, _len, _ref, _results;
      _ref = this.vco;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        v.setNote(note);
        _results.push(v.setFreq());
      }
      return _results;
    };

    return SynthCore;

  })();

  this.SynthCoreView = (function() {
    function SynthCoreView(model, id, dom) {
      this.model = model;
      this.id = id;
      this.dom = dom;
      this.vcos = $(this.dom.find('.vco'));
      this.EG_inputs = this.dom.find('.EG > input');
      this.FEG_inputs = this.dom.find('.FEG > input');
      this.filter_inputs = this.dom.find(".filter input");
      this.gain_inputs = this.dom.find('.gain > input');
      this.canvasEG = this.dom.find(".canvasEG").get()[0];
      this.canvasFEG = this.dom.find(".canvasFEG").get()[0];
      this.contextEG = this.canvasEG.getContext('2d');
      this.contextFEG = this.canvasFEG.getContext('2d');
      this.initEvent();
    }

    SynthCoreView.prototype.initEvent = function() {
      var _this = this;
      this.vcos.on("change", function() {
        return _this.setVCOParam();
      });
      this.gain_inputs.on("change", function() {
        return _this.setGain();
      });
      this.filter_inputs.on("change", function() {
        return _this.setFilterParam();
      });
      this.EG_inputs.on("change", function() {
        return _this.setEGParam();
      });
      this.FEG_inputs.on("change", function() {
        return _this.setFEGParam();
      });
      return this.setParam();
    };

    SynthCoreView.prototype.updateCanvas = function(name) {
      var adsr, canvas, context, h, w, w4;
      canvas = null;
      context = null;
      adsr = null;
      if (name === "EG") {
        canvas = this.canvasEG;
        context = this.contextEG;
        adsr = this.model.eg.getParam();
      } else {
        canvas = this.canvasFEG;
        context = this.contextFEG;
        adsr = this.model.feg.getParam();
      }
      w = canvas.width = 180;
      h = canvas.height = 50;
      w4 = w / 4;
      context.clearRect(0, 0, w, h);
      context.beginPath();
      context.moveTo(w4 * (1.0 - adsr[0] / 50000.0), h);
      context.lineTo(w / 4, 0);
      context.lineTo(w4 + w4 * (adsr[1] / 50000.0), h * (1.0 - adsr[2]));
      context.lineTo(w4 * 3, h * (1.0 - adsr[2]));
      context.lineTo(w4 * 3 + w4 * (adsr[3] / 50000.0), h);
      context.strokeStyle = 'rgb(0, 220, 255)';
      return context.stroke();
    };

    SynthCoreView.prototype.setParam = function() {
      this.setVCOParam();
      this.setEGParam();
      this.setFEGParam();
      this.setFilterParam();
      return this.setGain();
    };

    SynthCoreView.prototype.setVCOParam = function() {
      var i, vco, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.vcos.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        vco = this.vcos.eq(i);
        _results.push(this.model.setVCOParam(i, vco.find('.shape').val(), parseInt(vco.find('.octave').val()), parseInt(vco.find('.interval').val()), parseInt(vco.find('.fine').val())));
      }
      return _results;
    };

    SynthCoreView.prototype.setEGParam = function() {
      this.model.setEGParam(parseInt(this.EG_inputs.eq(0).val()), parseInt(this.EG_inputs.eq(1).val()), parseInt(this.EG_inputs.eq(2).val()), parseInt(this.EG_inputs.eq(3).val()));
      return this.updateCanvas("EG");
    };

    SynthCoreView.prototype.setFEGParam = function() {
      this.model.setFEGParam(parseInt(this.FEG_inputs.eq(0).val()), parseInt(this.FEG_inputs.eq(1).val()), parseInt(this.FEG_inputs.eq(2).val()), parseInt(this.FEG_inputs.eq(3).val()));
      return this.updateCanvas("FEG");
    };

    SynthCoreView.prototype.setFilterParam = function() {
      return this.model.setFilterParam(parseInt(this.filter_inputs.eq(0).val()), parseInt(this.filter_inputs.eq(1).val()));
    };

    SynthCoreView.prototype.setGain = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.gain_inputs.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.model.setGain(i, parseInt(this.gain_inputs.eq(i).val())));
      }
      return _results;
    };

    return SynthCoreView;

  })();

  this.Synth = (function() {
    function Synth(ctx, id) {
      this.ctx = ctx;
      this.id = id;
      this.pattern = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      this.time = 0;
      this.scale = [];
      this.view = new SynthView(this);
      this.core = new SynthCore(this, this.ctx, this.id);
    }

    Synth.prototype.connect = function(dst) {
      return this.core.connect(dst);
    };

    Synth.prototype.setDuration = function(duration) {
      this.duration = duration;
    };

    Synth.prototype.setKey = function(key) {
      return this.core.setKey(key);
    };

    Synth.prototype.setScale = function(scale) {
      this.scale = scale;
    };

    Synth.prototype.setNote = function(note) {
      return this.core.setNote(note);
    };

    Synth.prototype.noteToSemitone = function(ival) {
      return Math.floor((ival - 1) / 7) * 12 + this.scale[(ival - 1) % 7];
    };

    Synth.prototype.noteOn = function(note) {
      this.core.setNote(note);
      return this.core.noteOn();
    };

    Synth.prototype.noteOff = function() {
      return this.core.noteOff();
    };

    Synth.prototype.playAt = function(time) {
      var _this = this;
      this.time = time;
      this.view.playAt(this.time);
      if (this.pattern[this.time] !== 0) {
        this.noteOn(this.noteToSemitone(this.pattern[this.time]));
        return T.setTimeout((function() {
          return _this.core.noteOff();
        }), this.duration - 10);
      }
    };

    Synth.prototype.play = function() {
      return this.view.play();
    };

    Synth.prototype.stop = function() {
      this.noteOff();
      return this.view.stop();
    };

    Synth.prototype.pause = function(time) {
      return this.noteOff();
    };

    Synth.prototype.readPattern = function(pattern) {
      this.pattern = pattern;
      return this.view.readPattern(this.pattern);
    };

    Synth.prototype.addNote = function(time, note) {
      return this.pattern[time] = note;
    };

    Synth.prototype.removeNote = function(time) {
      return this.pattern[time] = 0;
    };

    return Synth;

  })();

  this.SynthView = (function() {
    function SynthView(model, id) {
      this.model = model;
      this.id = id;
      this.dom = $('#tmpl_synth').clone();
      this.dom.attr('id', 'synth' + id);
      $("#instruments").append(this.dom);
      this.indicator = this.dom.find('.indicator');
      this.table = this.dom.find('.table').eq(0);
      this.rows = this.dom.find('tr').each(function() {
        return $(this).find('td');
      });
      this.cells = this.dom.find('td');
      this.time = 0;
      this.page_total = 1;
      this.pattern = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      this.duration = 0;
      this.initEvent();
    }

    SynthView.prototype.initEvent = function() {
      var self;
      this.dom.find("td").each(function() {
        return $(this).addClass("off");
      });
      this.dom.find("tr").on("mouseenter", function(event) {
        return this.mouse_note = $(this).attr("note");
      });
      self = this;
      this.dom.find("td").on('mousedown', function() {
        var mouse_note, mouse_time;
        self.mouse_pressed = true;
        mouse_time = +($(this).data('x'));
        mouse_note = +($(this).data('y'));
        if ($(this).hasClass("on")) {
          $(this).removeClass();
          return self.removeNote($(this).text());
        } else {
          self.rows.each(function() {
            return $(this).find('td').eq(mouse_time).removeClass();
          });
          $(this).addClass("on");
          return self.model.addNote(mouse_time, mouse_note);
        }
      }).on('mouseenter', function() {
        var mouse_note, mouse_time;
        if (self.mouse_pressed) {
          mouse_time = +($(this).data('x'));
          mouse_note = +($(this).data('y'));
          self.rows.each(function() {
            return $(this).find('td').eq(mouse_time).removeClass();
          });
          $(this).addClass("on");
          return self.model.addNote(mouse_time, mouse_note);
        }
      }).on('mouseup', function() {
        return self.mouse_pressed = false;
      });
      this.rows.on('mouseup', (function() {
        return self.mouse_pressed = false;
      }));
      return this.dom.find('th').on('mousedown', (function() {
        return self.model.noteOn(self.model.noteToSemitone($(this).data('y')));
      })).on("mouseup", (function() {
        return self.model.noteOff();
      }));
    };

    SynthView.prototype.readPattern = function(pattern) {
      var i, y, _i, _ref, _results;
      this.pattern = pattern;
      this.cells.removeClass();
      _results = [];
      for (i = _i = 0, _ref = this.pattern.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        y = 10 - this.pattern[i];
        if (this.pattern[i] !== 0) {
          _results.push(this.rows.eq(y).find('td').eq(i).addClass('on'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    SynthView.prototype.playAt = function(time) {
      var page;
      this.indicator.css('left', (26 * (time % 32)) + 68 + 'px');
      page = Math.floor((time % this.pattern.length) / 32);
      return this.table.css('left', page * (-832) + 'px');
    };

    SynthView.prototype.play = function() {
      return this.indicator.css("display", "block");
    };

    SynthView.prototype.stop = function() {
      return this.indicator.css("display", "none");
    };

    return SynthView;

  })();

}).call(this);

/*
//@ sourceMappingURL=synth.map
*/
