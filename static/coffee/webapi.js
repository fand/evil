// Generated by CoffeeScript 1.6.3
(function() {
  var CONTEXT, KEYCODE_TO_NOTE, KEY_LIST, SAMPLE_RATE, SCALE_LIST, SEMITONE, T;

  SEMITONE = 1.05946309;

  KEY_LIST = {
    A: 55,
    Bb: 58.27047018976124,
    B: 61.7354126570155,
    C: 32.70319566257483,
    Db: 34.64782887210901,
    D: 36.70809598967594,
    Eb: 38.890872965260115,
    E: 41.20344461410875,
    F: 43.653528929125486,
    Gb: 46.2493028389543,
    G: 48.999429497718666,
    Ab: 51.91308719749314
  };

  SCALE_LIST = {
    IONIAN: [0, 2, 4, 5, 7, 9, 11, 12, 14, 16],
    DORIAN: [0, 2, 3, 5, 7, 9, 10, 12, 14, 15],
    PHRYGIAN: [0, 1, 3, 5, 7, 8, 10, 12, 13, 15],
    LYDIAN: [0, 2, 4, 6, 7, 9, 11, 12, 14, 16],
    MIXOLYDIAN: [0, 2, 4, 5, 7, 9, 10, 12, 14, 16],
    AEOLIAN: [0, 2, 3, 5, 7, 8, 10, 12, 14, 15],
    LOCRIAN: [0, 1, 3, 5, 6, 8, 10, 12, 13, 15]
  };

  CONTEXT = new webkitAudioContext();

  SAMPLE_RATE = CONTEXT.sampleRate;

  T = new MutekiTimer();

  this.Player = (function() {
    function Player() {
      var s, _i, _len, _ref;
      this.bpm = 120;
      this.duration = 500;
      this.freq_key = 55;
      this.scale = [];
      this.is_playing = false;
      this.is_loop = false;
      this.time = 0;
      this.scene_position = 0;
      this.scenes = [];
      this.scene = {
        bpm: this.bpm,
        key: this.freq_key,
        patterns: [[8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
      };
      this.context = CONTEXT;
      this.synth = [new Synth(this.context, 42)];
      this.synth_now = this.synth[0];
      _ref = this.synth;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        s.connect(this.context.destination);
      }
      this.view = new PlayerView(this);
    }

    Player.prototype.setBPM = function(bpm) {
      var s, _i, _len, _ref, _results;
      this.bpm = bpm;
      this.duration = 15.0 / this.bpm * 1000;
      _ref = this.synth;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.setDuration(this.duration));
      }
      return _results;
    };

    Player.prototype.setKey = function(key) {
      var s, _i, _len, _ref, _results;
      this.freq_key = KEY_LIST[key];
      _ref = this.synth;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.setKey(this.freq_key));
      }
      return _results;
    };

    Player.prototype.setScale = function(scale) {
      var s, _i, _len, _ref, _results;
      this.scale = SCALE_LIST[scale];
      _ref = this.synth;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.setScale(this.scale));
      }
      return _results;
    };

    Player.prototype.addNote = function(time, note) {
      return this.pattern[time] = note;
    };

    Player.prototype.removeNote = function(time) {
      return this.pattern[time] = 0;
    };

    Player.prototype.isPlaying = function() {
      return this.is_playing;
    };

    Player.prototype.play = function(pos) {
      var _this = this;
      this.is_playing = true;
      if (pos != null) {
        this.time = pos;
      }
      return T.setTimeout((function() {
        return _this.play_seq();
      }), 100);
    };

    Player.prototype.play_seq = function() {
      var s, _i, _len, _ref,
        _this = this;
      if (this.is_playing) {
        if (this.time >= this.scene.num_measure * 32) {
          this.time = 0;
        }
        _ref = this.synth;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          s.play(this.time);
        }
        return T.setTimeout((function() {
          _this.time++;
          return _this.play_seq();
        }), this.duration);
      }
    };

    Player.prototype.stop = function() {
      var s, _i, _len, _ref;
      _ref = this.synth;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        s.stop();
      }
      this.is_playing = false;
      return this.time = this.scene.num_measure * 32 - 1;
    };

    Player.prototype.pause = function() {
      this.noteOff();
      return this.is_playing = false;
    };

    Player.prototype.noteOn = function(note) {
      var s, _i, _len, _ref, _results;
      _ref = this.synth;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.noteOn(note));
      }
      return _results;
    };

    Player.prototype.noteOff = function() {
      var s, _i, _len, _ref, _results;
      _ref = this.synth;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.noteOff());
      }
      return _results;
    };

    Player.prototype.intervalToSemitone = function(ival) {
      return Math.floor((ival - 1) / 7) * 12 + this.scale[(ival - 1) % 7];
    };

    Player.prototype.readSong = function(song) {
      return null;
    };

    Player.prototype.readPattern = function(pat) {
      var i, _i, _ref;
      $(".on").removeClass("on").addClass("off");
      for (i = _i = 0, _ref = pat.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (pat[i] !== 0) {
          $("tr").eq(10 - pat[i]).find("td").eq(i).removeClass("off").addClass("on");
        }
      }
      return this.pattern = pat;
    };

    Player.prototype.getPattern = function() {
      return this.pattern;
    };

    Player.prototype.readScene = function(scene) {
      var i, patterns, _i, _ref, _results;
      this.scene = scene;
      patterns = this.scene.patterns;
      while (patterns.length > this.synth.length) {
        this.synth.push(new Synth());
      }
      _results = [];
      for (i = _i = 0, _ref = patterns.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.synth[i].readPattern(patterns[i]));
      }
      return _results;
    };

    return Player;

  })();

  this.PlayerView = (function() {
    function PlayerView(model) {
      this.model = model;
      this.dom = $("#control");
      this.play = this.dom.find('[name=play]');
      this.stop = this.dom.find('[name=stop]');
      this.bpm = this.dom.find("[name=bpm]");
      this.key = this.dom.find("[name=key]");
      this.scale = this.dom.find("[name=mode]");
      this.setBPM();
      this.setKey();
      this.setScale();
      this.initEvent();
    }

    PlayerView.prototype.initEvent = function() {
      var _this = this;
      this.dom.on("change", function() {
        _this.setBPM();
        _this.setKey();
        return _this.setScale();
      });
      this.play.on('mousedown', function() {
        if (_this.model.isPlaying()) {
          _this.model.pause();
          return _this.play.attr("value", "play");
        } else {
          _this.model.play();
          return _this.play.attr("value", "pause");
        }
      });
      return this.stop.on('mousedown', function() {
        _this.model.stop();
        return _this.play.attr("value", "play");
      });
    };

    PlayerView.prototype.setBPM = function() {
      return this.model.setBPM(parseInt(this.bpm.val()));
    };

    PlayerView.prototype.setKey = function() {
      return this.model.setKey(this.key.val());
    };

    PlayerView.prototype.setScale = function() {
      return this.model.setScale(this.scale.val());
    };

    return PlayerView;

  })();

  $(function() {
    var is_key_pressed, player, scn;
    $("#twitter").socialbutton('twitter', {
      button: 'horizontal',
      text: 'Web Audio API Sequencer http://www.kde.cs.tsukuba.ac.jp/~fand/wasynth/'
    });
    $("#hatena").socialbutton('hatena');
    $("#facebook").socialbutton('facebook_like', {
      button: 'button_count'
    });
    player = new Player();
    is_key_pressed = false;
    $(window).keydown(function(e) {
      var n;
      if (is_key_pressed === false) {
        is_key_pressed = true;
        if (player.isPlaying()) {
          player.noteOff();
        }
        n = KEYCODE_TO_NOTE[e.keyCode];
        if (n != null) {
          return player.noteOn(n);
        }
      }
    });
    $(window).keyup(function() {
      is_key_pressed = false;
      return player.noteOff();
    });
    scn = {
      num_measure: 1,
      patterns: [[3, 3, 10, 3, 10, 3, 9, 3, 3, 3, 10, 3, 10, 3, 9, 3, 1, 1, 10, 1, 10, 1, 9, 1, 2, 2, 10, 2, 10, 2, 9, 2]]
    };
    return player.readScene(scn);
  });

  KEYCODE_TO_NOTE = {
    90: 1,
    88: 2,
    67: 3,
    86: 4,
    66: 5,
    78: 6,
    77: 7,
    65: 8,
    83: 9,
    68: 10,
    188: 8,
    190: 9,
    192: 10,
    70: 11,
    71: 12,
    72: 13,
    74: 14,
    75: 15,
    76: 16,
    187: 17,
    81: 15,
    87: 16,
    69: 17,
    82: 18,
    84: 19,
    89: 20,
    85: 21,
    73: 22,
    79: 23,
    80: 24,
    49: 22,
    50: 23,
    51: 24,
    52: 25,
    53: 26,
    54: 27,
    55: 28,
    56: 29,
    57: 30,
    48: 31
  };

}).call(this);

/*
//@ sourceMappingURL=webapi.map
*/
